<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>strain-design on cobrapy - constraint-based metabolic modeling in Python</title>
    <link>https://opencobra.github.io/cobrapy/tags/strain-design/index.xml</link>
    <description>Recent content in strain-design on cobrapy - constraint-based metabolic modeling in Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://opencobra.github.io/cobrapy/tags/strain-design/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>dd-decaf</title>
      <link>https://opencobra.github.io/cobrapy/packages/dd-decaf/</link>
      <pubDate>Mon, 27 Mar 2017 11:52:33 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/dd-decaf/</guid>
      <description>&lt;p&gt;Large EU-backed project bringing together leading academic partners from five
European universities with five innovative European companies to address the
challenge of building a comprehensive design tool. &lt;strong&gt;DD-DeCaF&lt;/strong&gt; aims to develop
cutting edge methods for using large scale data to design cell factories and
communities for biotechnological applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cameo</title>
      <link>https://opencobra.github.io/cobrapy/packages/cameo/</link>
      <pubDate>Fri, 13 Jan 2017 11:00:01 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/cameo/</guid>
      <description>&lt;p&gt;Cameo is a high-level python library developed to aid the strain design process in metabolic engineering projects. The library provides a modular framework of simulation methods, strain design methods, access to models, that targets developers that want custom analysis workflows.&lt;/p&gt;

&lt;p&gt;Computationally heavy methods have been parallelized and can be run on a clusters using the IPython parallelization framework (see example and documentation for more details). The default fallback is python&amp;rsquo;s multiprocessing library.&lt;/p&gt;

&lt;p&gt;Furthermore, it exposes a high-level API to users that just want to compute promising strain designs.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>